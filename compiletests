#!/bin/bash

TESTDIR=tests
SUCCEEDING=$TESTDIR/succeeding
FAILING=$TESTDIR/failing
OUT_DIR=$TESTDIR/out
EXPECT_DIR=$TESTDIR/expect
EXPECT_SUCCEEDING=$TESTDIR/expect/succeeding
EXPECT_FAILING=$TESTDIR/expect/failing

mkdir -p $OUT_DIR
mkdir -p $EXPECT_DIR
mkdir -p $EXPECT_SUCCEEDING
mkdir -p $EXPECT_FAILING
mkdir -p $SUCCEEDING
mkdir -p $FAILING

SUCCEEDING_TESTS=$SUCCEEDING/*
FAILING_TESTS=$FAILING/*

RED=`tput setaf 1`
BOLD=`tput bold`
GREEN=`tput setaf 2`
YELLOW=`tput setaf 3`
RESET+=`tput sgr0`

SKE="${BOLD}ske:${RESET}"

FAILING_TEST_COUNT=0
SUCCEEDING_TEST_COUNT=0

function test_expect()
{
	local EXPECT_NAME=$1.expect
	local EXPECT_LOC=$2/$1.expect

	if [ -f "$EXPECT_LOC" ]; then
		local EXPECT=`cat $EXPECT_LOC`
		if [[ "$OUTPUT" == "$EXPECT" ]]; then
			echo $n "${GREEN}${BOLD}Success${RESET}"
			((SUCCEEDING_TEST_COUNT=SUCCEEDING_TEST_COUNT+1))
		else
			echo $n "${RED}${BOLD}Failed${RESET}"
			((FAILING_TEST_COUNT=FAILING_TEST_COUNT+1))
		fi
	else
		echo "${SKE} $1.ske returned result"p
		echo "$OUTPUT"
		read -p "${SKE} ${YELLOW}${BOLD}${EXPECT_LOC}${RESET} does not yet exist. Create it now with result ${BOLD}(y/n)? " choice
		case "$choice" in 
			y|Y ) touch $EXPECT_LOC && echo "$OUTPUT" > $EXPECT_LOC ;;
			n|N ) ;;
			* ) echo "please answer 'y' or 'n'";;
		esac
	fi
}

TOTAL_TESTS=0

for n in $SUCCEEDING_TESTS; do
	ske $n
	((TOTAL_TESTS=TOTAL_TESTS+1))

	NO_EXT="${n%.*}"
	NO_EXT=${NO_EXT##*/}

	if [ -e a.out ]; then
		OUTPUT=$(./a.out 2>&1 >/dev/null)
		test_expect $NO_EXT $EXPECT_SUCCEEDING

		rm a.out
	else
		echo "Not assembling $n"
	fi
done

for n in $FAILING_TESTS; do
	OUTPUT=$(ske $n 2>&1 >/dev/null)
	((TOTAL_TESTS=TOTAL_TESTS+1))
	
	NO_EXT="${n%.*}"
	NO_EXT=${NO_EXT##*/}

	test_expect $NO_EXT $EXPECT_FAILING
done

echo "${SKE} ${BOLD}${SUCCEEDING_TEST_COUNT}/${TOTAL_TESTS}${RESET} tests succeeded"
